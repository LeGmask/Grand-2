#RequireContext CMapEditorPlugin

Text getUi() {
return """    

<stylesheet>
  <style class="success" focusareacolor2="0d0" focusareacolor1="070" colorize="0d0"/>
  <style class="successbg" bgcolor="050a"/>
  <style class="danger" focusareacolor2="d00" focusareacolor1="700" colorize="d00"/>
  <style class="dangerbg" bgcolor="500a"/>
  <style class="info" focusareacolor2="0dd" focusareacolor1="077" colorize="0dd" />
  <style class="infobg" bgcolor="055a" halign="center" valign="center"/>
  <style class="warning" focusareacolor2="dd0" focusareacolor1="770" colorize="dd0"/>
  <style class="warningbg" bgcolor="550a" halign="center" valign="center"/>
  <style class="none" focusareacolor2="777" focusareacolor1="0000" colorize="fff0"/>

  <style class="uiButtonElement uiConfirmButtonElement" focusareacolor2="ddd" focusareacolor1="777" textcolor="fff" z-index="20" size="24 6" halign="center" valign="center" textsize="2"  textemboss="1"/>
  <style class="uiSelectElement" focusareacolor1="000" focusareacolor2="222" />
  <style class="uiCheckboxElement" focusareacolor1="0000" focusareacolor2="0000" />
  <style class="uiCheck" focusareacolor1="0000" focusareacolor2="0000" textcolor="0d0" />
  <style class="background" bgcolor="000a" halign="center" valign="center" />

</stylesheet>	


	
	<frame id="chat_popup" hidden="1">
		<label pos="128 -38" size="54.9 5" text="New message:" halign="center" valign="center" scriptevents="1" id="frompopup"/>
		<quad pos="128 -41" z-index="0" size="54.9 5" bgcolor="FFFA" style="EnergyBar" substyle="HeaderGaugeRight" halign="center" valign="center"/>
		<label pos="101 -43" size="54 14" text="This is a test message for the popup test view" halign="left" valign="top" textsize="2" autonewline="1" scriptevents="1" id="messagepopup"/>
		
		<quad class="background" size="57 24" pos="128 -47"/>
	</frame>
	
	
	<frame posn="4 0 8" id="chat" hidden="1">
		<frame posn="77 61 2" id="chatlistcontainer">
			<label posn="-162 19" sizen="170 112" autonewline="1" textsize="2,5" scriptevents="1" id="chatlist"/>	
		</frame>
		<entry pos="-84 -45" z-index="0" size="139 8" default="hello world" valign="center" focusareacolor2="7B7B7BFF" focusareacolor1="727272FF" scriptevents="1" style="TextValueSmall" id="message"/>
		<label class="uiButtonElement uiConfirmButtonElement" posn="71 -45" text="Send" scriptevents="1" id="Send" size="29 7.63"/>
		
		<quad class="background" size="180 140" pos="0 15"/>
	</frame>

	<quad pos="136 -68" z-index="0" size="10 10" bgcolor="FFFA" style="Icons128x32_1" substyle="Windowed" scriptevents="1" id="chatbtn"/>

<script><!--
	
	#Include "MathLib" as ML
	#Include "TextLib" as TL
    #Include "AnimLib" as AL
    
	declare Integer	LastChatListChange;
	declare Boolean ChatState;

	Void Chatpopup(Text _message) {
	declare Integer DialogVisibleTime = Now;
	declare Integer Closepopup = Now;
	declare Boolean Close = False;
	

	declare CMlFrame Dialog <=> (Page.GetFirstChild("chat_popup") as CMlFrame);
	declare CMlLabel Content <=> (Page.GetFirstChild("messagepopup") as CMlLabel);
	
	
	Content.SetText(_message);

	
	while (!Close) {
		yield;
		Dialog.Show();
		Dialog.RelativeScale = AL::EaseInOutSine(Now - DialogVisibleTime, 1.2, -0.2, 200);
		if ((Now - Closepopup) > 3000) {
			Close = True;
		}
	}
	Dialog.Hide();
	

	sleep(200);

	}	

Integer UpdateChatList(Integer _CurrentChatLine) {
	declare Text Page_ChatList for Page;
	declare Text Page_ChatPopup for Page;
	declare CMlLabel ChatList <=> (Page.GetFirstChild("chatlist") as CMlLabel);
	declare Integer OldLineCount = ChatList.ValueLineCount;
	
	if (Page_ChatList != ChatList.Value) {
		ChatList.SetText(Page_ChatList);
		Chatpopup(Page_ChatPopup);
		yield;
		declare Integer NewLinesCount = ChatList.ValueLineCount - OldLineCount;
		
		if (NewLinesCount > 0 && ChatList.ValueLineCount > 18) {
			ChatList.RelativePosition[1] = (ChatList.ValueLineCount - 18) * 2.;
		}
		
		LastChatListChange = Now;
		return ChatList.ValueLineCount - 18;
	}
	
	return _CurrentChatLine;
}
Void chat() {
	declare CMlFrame Chat <=> (Page.GetFirstChild("chat") as CMlFrame);
	if (ChatState == False){
		Chat.Show();
		ChatState = True;
	}
	else if (ChatState == True){
		Chat.Hide();
		ChatState = False;
	}
}
	main() {
		declare CMlFrame	FrameChatListContainer	<=>	(Page.GetFirstChild("chatlistcontainer") as CMlFrame);
		declare CMlLabel	LabelChatList			<=>	(Page.GetFirstChild("chatlist") as CMlLabel);
		declare CMlQuad		QuadChat				<=>	(Page.GetFirstChild("chatbtn") as CMlQuad);
		declare CMlQuad		QuadChatsendmsg			<=>	(Page.GetFirstChild("send")	as CMlQuad);
		declare CMlEntry 	TextEntryMessage		<=> (Page.GetFirstChild("message") as CMlEntry);
		
		declare Integer CurrentChatLine = 0;	

		FrameChatListContainer.ClipWindowActive = True;
		FrameChatListContainer.ClipWindowRelativePosition = <LabelChatList.RelativePosition[0] + LabelChatList.Size[0] / 2 - 1, LabelChatList.RelativePosition[1] - LabelChatList.Size[1] / 2 >;
		FrameChatListContainer.ClipWindowSize = LabelChatList.Size;
		
		while (True) {
			yield;
			CurrentChatLine = UpdateChatList(CurrentChatLine);
			foreach (Event in PendingEvents) {
				if (Event.Type == CMlEvent::Type::MouseClick) {
					switch (Event.Control) {
						case QuadChat: { // show Chat
							chat();

						}
					}
				}
				if (Event.Type == CMlScriptEvent::Type::MouseClick && Event.ControlId == "Send") {
				SendCustomEvent("onSendMsg", [TextEntryMessage.Value]);
				TextEntryMessage.Value = "";
				}
			}
		}
	
	}
	--></script>	
	""";
}
Text LineFeed() {
	return """
""";
}
Void AddChatLine(Text _Line) {
	declare Text Page_ChatList for ManialinkPage = "";
	declare Text Page_ChatPopup for ManialinkPage = "";
	Page_ChatList ^= LineFeed() ^ _Line;
	Page_ChatPopup = _Line;

}
***OnInit***
***
LayersDefaultManialinkVersion = 3;
ManialinkText = getUi();
AddChatLine("> $0FFGrand 2 $000- $FFFgsuccessfuly started ! ");
log("starting...");
sleep(300);

***

Void dummy() {
}

/* --------------------- Main Script ------------------------ */

main() {

+++ OnInit +++

  while(True) {
    yield;
	//AddChatLine("Test");
	//sleep(5000);
	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CMapEditorPluginEvent::Type::LayerCustomEvent: {		
				log(Event.CustomEventData); // disable after you dont' need it :)
				declare Text msg = Event.CustomEventData[0];
				//sendmsgonline
				AddChatLine(msg);				
			}
		}
	}
  }
}
