#RequireContext CMapEditorPlugin

#Include "TextLib" as TextLib
#Include "MathLib" as MathLib
#Include "TimeLib" as TimeLib

#Include "EditorPlugins/Grand2Lib/Ui.Script.txt" as Grand2UI
#Include "EditorPlugins/Grand2Lib/Connection.Script.txt" as Grand2

#Const	Version	"0.1"
#Const	ScriptName	"Grand2.Script.txt"

// structs
#Struct JsonBlock {
	Text 		Action;
	Text		Sender;
	Text 		ModelName;
	Int3 		CoordStart;
	Int3 		CoordEnd;
	Integer 	Direction;
}

#Struct ServerMessage {
	Text Action;
	Text Message;
	Text Token;
	JsonBlock[] Blocks;
}

#Struct sServer {
	Text Host;
	Text Password;
	Text Token;
}

// externals
#Struct Grand2::sLobbyInfo as sLobbyInfo


#Const C_CanyonRoadBlocks [
	"RoadMain"
]
#Const C_StadiumRoadBlocks [
	"StadiumRoadMain",
	"StadiumPlatformRoad",
	"StadiumRoadDirt",
	"StadiumRoadDirtHigh",
	"StadiumTubeRoad",
	"StadiumTubeRoadDown",
	"StadiumTubeRoadUp",
	"StadiumTubeRoadCross",
	"StadiumControlRoadGlass",
	"StadiumControlRoadPub",
	"StadiumControlRoadCamera",
	"StadiumTubeRoadLightSystem",
	"StadiumTubeRoadSoundSystem",
	"StadiumInflatableSupport"
]
#Const C_StormRoadBlocks [
	"RoadDirt"
]
#Const C_ValleyRoadBlocks [
	"Road2Way",
	"Road4Way",
	"RoadDirt"
]

// Globals
declare sServer ServerInfo;
declare Integer LastEdit;
declare	Boolean IsExternalEdit;
declare Text[] CurrentCollectionRoadBlocks;
declare Int3 SelectionStartCoord;
declare Int3 SelectionEndCoord;

Void AddEventLine(Text _Line) {
	declare Text	Page_EventList			for ManialinkPage = "";
	Page_EventList ^= "\n" ^ _Line;
}


Integer getBlockDirection(CMapEditorPlugin::CardinalDirections direction) {
	switch (direction) {
			case CMapEditorPlugin::CardinalDirections::North:  {return 0;}
			case CMapEditorPlugin::CardinalDirections::East: {return 1;}
			case CMapEditorPlugin::CardinalDirections::South:{ return 2;}
			case CMapEditorPlugin::CardinalDirections::West:{ return 3;}
	}
	return 0;
}

CMapEditorPlugin::CardinalDirections convertBlockDirection(Integer direction) {
	switch (direction) {
			case 0: return CMapEditorPlugin::CardinalDirections::North;
			case 1: return CMapEditorPlugin::CardinalDirections::East;
			case 2: return CMapEditorPlugin::CardinalDirections::South;
			case 3: return CMapEditorPlugin::CardinalDirections::West;
	}
	return CMapEditorPlugin::CardinalDirections::North;
}


Void OnResponse(Text _response) {
	declare ServerMessage Data;
	declare success = Data.fromjson(_response);

	switch (Data.Action) {
		case "Chat": {
			AddEventLine(TimeLib::FormatDate(TimeLib::GetCurrent(), TimeLib::EDateFormats::Time) ^ " $o|$o " ^ Data.Message);
		}
		case "ModifyMap": {
			IsExternalEdit = True;
			LastEdit = Now;
			foreach (eBlock in (Data.Blocks)) {
				declare BlockModel = GetBlockModelFromName(eBlock.ModelName);
				switch (eBlock.Action) {
					case "Place": {
							declare success = PlaceBlock(BlockModel, eBlock.CoordStart, convertBlockDirection(eBlock.Direction));
						AddEventLine(TimeLib::FormatDate(TimeLib::GetCurrent(), TimeLib::EDateFormats::Time) ^ " $o|$o " ^ eBlock.Sender ^ " $o+$o " ^ eBlock.ModelName ^ " at " ^ eBlock.CoordStart);
					}
					case "Remove": {
							declare success = RemoveBlock(eBlock.CoordStart);
					}
					case "PlaceRoad": {
							declare success = PlaceRoadBlocks(BlockModel, eBlock.CoordStart, eBlock.CoordEnd);
						AddEventLine(TimeLib::FormatDate(TimeLib::GetCurrent(), TimeLib::EDateFormats::Time) ^ " $o|$o " ^ eBlock.Sender ^ " $o+$o " ^ eBlock.ModelName ^ " from " ^ eBlock.CoordStart ^ " to " ^ eBlock.CoordEnd);
					}
					case "PlaceTerrain": {
							declare success = PlaceTerrainBlocks(BlockModel, eBlock.CoordStart, eBlock.CoordEnd);
						AddEventLine(TimeLib::FormatDate(TimeLib::GetCurrent(), TimeLib::EDateFormats::Time) ^ " $o|$o " ^ eBlock.Sender ^ " $o+$o " ^ eBlock.ModelName ^ " from " ^ eBlock.CoordStart ^ " to " ^ eBlock.CoordEnd);
					}
					case "EraseTerrain": {
						declare success = RemoveTerrainBlocks(eBlock.CoordStart, eBlock.CoordEnd);
						AddEventLine(TimeLib::FormatDate(TimeLib::GetCurrent(), TimeLib::EDateFormats::Time) ^ " $o|$o " ^ eBlock.Sender ^ " $o-$o from " ^ eBlock.CoordStart ^ " to " ^ eBlock.CoordEnd);
					}
				}
			}
		}
	}
}

***OnInit***
***
declare Boolean	Page_LaunchPlugin for ManialinkPage = True;
declare Boolean	Page_Events for ManialinkPage;
declare Boolean Page_StopScript for ManialinkPage = False;

LayersDefaultManialinkVersion = 3;
ManialinkText = Grand2UI::getUi();
log("starting...");
log(TimeLib::FormatDate(TimeLib::GetCurrent(), TimeLib::EDateFormats::Time) ^ " > " ^ ScriptName ^ " V " ^ Version ^ " launched.");
IsExternalEdit = False;

***


***OnHttpRequest***
***

/* if(Request.Url == serverHost^"/listener?login="^LocalUser.Login) {
	if (Request.StatusCode == 200) {
		OnResponse(Request.Result);
	}
	log("waitin...");
	HttpGet(HOST^"/listener?login="^LocalUser.Login);
}
*/
declare dummy = "nothing";

***


***OnMapActioniedBlockPlace***
***

if (IsExternalEdit == False){ 
	declare JsonBlock block = JsonBlock{Action = "Place", CoordStart = Cursor.Coord, ModelName = Cursor.BlockModel.Name, Direction = getBlockDirection(Cursor.Dir), Sender = LocalUser.Login};
//	SendMessage(block.tojson());
	AddEventLine(TimeLib::FormatDate(TimeLib::GetCurrent(), TimeLib::EDateFormats::Time) ^ " $o|$o " ^ LocalUser.Login ^ " $o+$o " ^ Cursor.BlockModel.Name ^ " at " ^ Cursor.Coord);
} else {
	IsExternalEdit = False;
}

***

***OnMapActioniedBlockErase***
***

declare JsonBlock block = JsonBlock{Action = "Remove", CoordStart = Cursor.Coord, Sender = LocalUser.Login};

// SendMessage(block.tojson());
AddEventLine(TimeLib::FormatDate(TimeLib::GetCurrent(), TimeLib::EDateFormats::Time) ^ " $o|$o " ^ LocalUser.Login ^ " $o-$o at " ^ Cursor.Coord);

***

***OnMapActioniedRoadPlace***
***
if (IsExternalEdit == False) {
	declare Action = "PlaceRoad"; 
	
	declare JsonBlock Road = JsonBlock{
		Action = Action, 
		ModelName = Cursor.BlockModel.Name, 
		CoordStart = SelectionStartCoord,
		CoordEnd = SelectionEndCoord,
		Sender = LocalUser.Login
		};

//	SendMessage(Road.tojson());
	AddEventLine(TimeLib::FormatDate(TimeLib::GetCurrent(), TimeLib::EDateFormats::Time) ^ " $o|$o " ^ LocalUser.Login ^ " $o+$o " ^ Cursor.BlockModel.Name ^ " from " ^ SelectionStartCoord ^ " to " ^ SelectionEndCoord);
}
else{
	IsExternalEdit = False;
}

***

***OnMapActioniedTerrainPlace***
***
if (IsExternalEdit == False) {
	declare Action = "PlaceTerrain"; 
	
	declare JsonBlock Terrain = JsonBlock{
	Action = Action,
	ModelName = Cursor.TerrainBlockModel.Name,
	CoordStart = SelectionStartCoord,
	CoordEnd = SelectionEndCoord,
	Sender = LocalUser.Login};

	// SendMessage(Terrain.tojson());
	AddEventLine(TimeLib::FormatDate(TimeLib::GetCurrent(), TimeLib::EDateFormats::Time) ^ " $o|$o " ^ LocalUser.Login ^ " $o+$o " ^ Cursor.TerrainBlockModel.Name ^ " from " ^ SelectionStartCoord ^ " to " ^ SelectionEndCoord);
}
else{
	IsExternalEdit = False;
}

***

***OnMapActioniedTerrainErase***
***
if (IsExternalEdit == False) {
	declare Action = "EraseTerrain"; 
	
	declare JsonBlock Terrain = JsonBlock
	{
	Action = Action, 
	ModelName = Cursor.TerrainBlockModel.Name, 
	CoordStart = SelectionStartCoord,
	CoordEnd = SelectionEndCoord,
	Sender = LocalUser.Login
	};

//	SendMessage(Terrain.tojson());
	AddEventLine(TimeLib::FormatDate(TimeLib::GetCurrent(), TimeLib::EDateFormats::Time) ^ " $o|$o " ^ LocalUser.Login ^ " $o-$o from " ^ SelectionStartCoord ^ " to " ^ SelectionEndCoord);
}
else{
	IsExternalEdit = False;
}

***


Void dummy() {
}

/* --------------------- Main Script ------------------------ */

main() {

+++ OnInit +++
	switch (Map.MapInfo.CollectionName) {
				case "Canyon": CurrentCollectionRoadBlocks = C_CanyonRoadBlocks;
				case "Stadium": CurrentCollectionRoadBlocks = C_StadiumRoadBlocks;
				case "Storm": CurrentCollectionRoadBlocks = C_StormRoadBlocks;
				case "Valley": CurrentCollectionRoadBlocks = C_ValleyRoadBlocks;
	}
			
  while(True) {
    yield;
	if (Page_StopScript) break;

 	foreach(HttpEvent in Http.PendingEvents) {
		declare Request = HttpEvent.Request;		
		+++ OnHttpRequest +++		
		Http.Destroy(Request);
	} // httpEvents

	  foreach (Event in PendingEvents) {
	
			switch (Event.Type) {
				case CMapEditorPluginEvent::Type::LayerCustomEvent: {
					if(Event.CustomEventType == "connectHost") {
							ServerInfo = sServer{ Host=Event.CustomEventData[0],Password=Event.CustomEventData[1]  };
			   			declare sLobbyInfo response;
							response = Grand2::ConnectServer(ServerInfo.Host^"/editor/lobby", ServerInfo.Password);
							if (response.StatusCode == 200) {
								ServerInfo.Token = response.Token;																
							} else {
							/** @todo send notification authenticating failed */
							}
					}
					
				}
				
				case CMapEditorPluginEvent::Type::MapModified: {
					if(EditMode == ::EditMode::Unknown) {
						log("Place mode unknow");		
					}
					else if(EditMode == ::EditMode::Erase) {
						if(PlaceMode == ::PlaceMode::Block){
							+++ OnMapActioniedBlockErase +++
						}
					}
					else if (EditMode == ::EditMode::Place) {
						if(Cursor.BlockModel != Null) {
							if(PlaceMode == ::PlaceMode::Block) {
								if(!Cursor.BlockModel.IsRoad && !Cursor.BlockModel.IsTerrain && !CurrentCollectionRoadBlocks.exists(Cursor.BlockModel.Name)){
									+++ OnMapActioniedBlockPlace +++
								}
							}
						}
					}
					
				}
				case CMapEditorPluginEvent::Type::CursorSelectionBegin: {
					SelectionStartCoord = Cursor.Coord;
				}
				case CMapEditorPluginEvent::Type::CursorSelectionEnd: {
					SelectionEndCoord = Cursor.Coord;
					switch (PlaceMode) {
						case ::PlaceMode::Block: {
							if (EditMode == ::EditMode::Place) {
								if (Cursor.BlockModel != Null && CurrentCollectionRoadBlocks.exists(Cursor.BlockModel.Name)){
									if (SelectionStartCoord == SelectionEndCoord){
										+++ OnMapActioniedBlockPlace +++
									}
									else {
										+++ OnMapActioniedRoadPlace +++
									}
								}
							}
						}
						
						case ::PlaceMode::Terraform: {
						
							if (EditMode == ::EditMode::Place && Cursor.TerrainBlockModel != Null){
								+++ OnMapActioniedTerrainPlace +++
							}else if (EditMode == ::EditMode::Erase){
								+++ OnMapActioniedTerrainErase +++
							}
						}
					}															
					SelectionStartCoord = <0, 0, 0>;
					SelectionEndCoord = <0, 0, 0>;
				}	
			}
			if (IsExternalEdit == True){
				if((Now - LastEdit) > 10 ) {
					IsExternalEdit = False;
				}
			}
		} // pending events
		
		+++ Loop +++
  }
}
