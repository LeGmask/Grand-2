Text getUi() {
return """    
	<stylesheet>
    <style class="button" sizen="20 5" valign="center" halign="center" style="CardButtonMedium"/>
    <style class="title" halign="center"  valign="center" textfont="RajdhaniMono" translate="0" textsize="8" />
    <style class="text"  textsize="4" textfont="BiryaniDemiBold" autonewline="1" textcolor="CCCCCCFF" halign="left" valign="top" />
    <style class="entry" valign="center2" halign="left" id="host" focusareacolor1="0002" focusareacolor2="0003" selecttext="1" />
    </stylesheet>	

    <frame posn="0 0 5">
		<frame posn="0 0 10">
			<frame posn="0 0 1" id="Dialog" hidden="1">
				<quad posn="0 15.5 2" sizen="126.5 8" style="Bgs1InRace" substyle="BgGlow2" halign="center" valign="center"/>
				<quad posn="0 -16 2" sizen="120 2" style="Bgs1InRace" substyle="BgMetalBar" halign="center" valign="center"/>
				<label posn="0 5 1" sizen="120 10" text="myLabel" autonewline="1" valign="center" halign="center" id="dialog_content"/>
				<label class="button" posn="0 -5 1" scriptevents="1" text="OK" id="dialog_btn" />
				<quad posn="0 0 0" sizen="120 30" style="Bgs1InRace" substyle="BgWindow2" halign="center" valign="center" opacity="0.75"/>
			</frame>
			<quad sizen="320 180" bgcolor="000A" halign="center" valign="center" id="dialog_bg" opacity="0"/>
		</frame>
	
		<frame posn="0 0 10">
			<frame posn="0 0 1" id="booleandialog" hidden="1">
				<quad posn="0 15.5 2" sizen="126.5 8" style="Bgs1InRace" substyle="BgGlow2" halign="center" valign="center"/>
				<quad posn="0 -16 2" sizen="120 2" style="Bgs1InRace" substyle="BgMetalBar" halign="center" valign="center"/>		
				<label posn="0 5 1" sizen="120 10" text="myLabel" autonewline="1" valign="center" halign="center" id="booleandialog_content"/>
				<frame posn="-25 -5">                
					<label class="dialog button" posn="0 0 1" text="Yes" scriptevents="1" id="booleandialog_btnyes"/>
					<label class="dialog button" posn="50 0 1" text="No" scriptevents="1" id="booleandialog_btnno"/>
				</frame>
		
				<quad posn="0 0 0" sizen="120 30" style="Bgs1InRace" substyle="BgWindow2" halign="center" valign="center" opacity="0.75"/>
			</frame>
			<quad sizen="320 180" bgcolor="000A" halign="center" valign="center" id="booleandialog_bg" opacity="0"/>
		</frame>
	
		<frame posn="0 0 10">		
			<frame posn="0 0 10" id="Home">
				<label pos="3 75" size="203 18" text="Welcome to Grand 2 ! " class="title"/>
				<quad pos="3 74.7"  size="206 21" bgcolor="FFFA" style="Bgs1" substyle="BgColorContour" halign="center" valign="center"/>
				
				<label posn="-60.1 52.4" sizen="104 17.7" text="What is Grand 2? " class="title"/>
				<quad pos="-97.7 47.2"  size="70.8 1.98" bgcolor="FFFA" style="Bgs1" substyle="ProgressBarSmall"/>
				<label pos="-97 44"  size="125 29" text="Grand 2 is a multiplayer map editor for ManiaPlanet, created by LeGmask and Reaby. It is based on the initial project Grand, developed by Nerpson and Guerro." class="text" />
				<quad pos="-99.5 57.3"  size="129 45" bgcolor="FFFFFFFF" style="Bgs1" substyle="BgTitleGlow"/>
				<quad pos="33.8 57.3"  size="72.8 112" bgcolor="FFFA" style="Bgs1" substyle="BgTitleGlow"/>
	
				
				<label posn="48.9 52" sizen="31 17" text="News: " class="title"/>
				<quad pos="35 46"  size="27 2" bgcolor="FFFA" style="Bgs1" substyle="ProgressBarSmall"/>
				<label pos="36 43"  size="68 56" text="Beta 1.0 officially released" id="news_content" class="text"/>			
				
				<label posn="58.9 -18" sizen="53 17" text="Need help?" halign="center"  valign="center" textfont="RajdhaniMono" translate="0" textsize="8"/>
				<quad pos="35 -24"  size="48 2" bgcolor="FFFA" style="Bgs1" substyle="ProgressBarSmall"/>
				<label pos="36 -27"  size="68 14" text="Join our official Discord server!" autonewline="1" class="text"/>	
				<label posn="70 -47" sizen="41 5" text="Discord " valign="center" halign="center" style="CardButtonMedium" scriptevents="1" id="discord_btn" url="https://discord.gg/sFAzTFm"/>
				
				<label posn="-73 4" sizen="48 17" text="Connection"  translate="0" class="title"/>
				<quad pos="-96.5 -1.47"  size="27 2" bgcolor="FFFA" style="Bgs1" substyle="ProgressBarSmall"/>
				<label pos="-97 -8"  size="96 7" text="Server Address: " autonewline="1" class="text"/>	
				<entry posn="-86 -19" sizen="100 6" default="http://localhost:8000" textformat="Basic" class="entry" scriptevents="1"  id="serverHost"/>
				<label pos="-97 -27"  size="96 6" text="Server Password : " halign="left" class="text"/>	
				<entry posn="-86 -37" sizen="100 6" id="serverPassword" scriptevents="1" textformat="Password" class="entry"/>
				<label posn="-54.9 -45.5" sizen="0" text="Connect" id="home_btnlogin" scriptevents="1" class="button"/>
				<label posn="-15.9 -45.5" text="Exit" scriptevents="1" id="home_btnexit" class="button"/>
				<quad pos="-99 9"  size="129 63" bgcolor="FFFA" style="Bgs1" substyle="BgTitleGlow"/>
		
				<quad posn="3 16" sizen="211 146" style="Bgs1" substyle="BgCardList" halign="center" valign="center" opacity="0.75"/>
			</frame>
			<quad sizen="320 180" bgcolor="000A" halign="center" valign="center" id="home_bg" opacity="0" pos="0 0"/>
		</frame>
		<frame posn="4 0 8" id="events" hidden="1">
			<label posn="115 63" sizen="80 6" text="Event view" valign="center2" halign="center" style="TextTitle3"/>
			<quad pos="75 66" z-index="0" size="80 52.6" bgcolor="FFFA" style="Bgs1" substyle="BgColorContour"/>
			<quad posn="115 40.1" sizen="80 51.2" bgcolor="FFFA" style="Bgs1" substyle="BgCardList" valign="center" halign="center"/>
			
			<frame posn="77 61 2" id="eventlistcontainer">
				<label posn="0 0" sizen="68 45" autonewline="1" textsize="0.4" id="eventlist"/>	
			</frame>
			<quad posn="111 38.2" sizen="68 45" bgcolor="FFFA" style="EnergyBar" substyle="BgText" valign="center" halign="center" opacity="0.25" id=eventlistbg/>
			<quad posn="145 55.2" sizen="10 10" bgcolor="FFFA" style="UIConstruction_Buttons" substyle="Up" scriptevents="1" id="eventup"/>
			<quad posn="145 30.5" sizen="10 10" bgcolor="FFFA" style="UIConstruction_Buttons" substyle="Down" scriptevents="1" id="eventdown"/>
		</frame>
	
	
		<frame posn="0 20 10" id="Settings" hidden="1">
			<label pos="3 43" size="203 18" text="Grand 2 - Settings" textfont="RajdhaniMono" textsize="10" halign="center" valign="center" id="welcome_content"/>
			<quad pos="-3 43"  size="153 21" bgcolor="FFFA" style="Bgs1" substyle="BgColorContour" halign="center" valign="center"/>
			
			<label posn="-46 27" sizen="104 16" text="User Interface Settings:" halign="center"  valign="center" textfont="RajdhaniMono" translate="0" textsize="5"/>
			<quad pos="-80 23"  size="68 1" bgcolor="FFFA" style="Bgs1" substyle="ProgressBarSmall"/>
				
			<label posn="52 10" sizen="20 5" text="value" valign="center" halign="center" style="CardButtonMedium" scriptevents="1" id="settings_debug"/>
			<label pos="-76 18" z-index="0" size="106 17" text="$oDebug view$o: 													Toggle the event view to show the latest events of the room, such as placed or removed blocks."  autonewline="1"/>
			<label posn="55 -48" sizen="12 1" text="Close" valign="center" halign="center" style="CardButtonMedium" scriptevents="1" id="settings_close"/>
			<quad pos="-4 10"  size="149 20" bgcolor="FFFFFFFF" style="Bgs1" substyle="BgTitleGlow" halign="center" valign="center"/>
			<quad pos="-3 -11.5"  size="154 83" bgcolor="FFFFFFFF" style="Bgs1" substyle="BgTitleGlow" halign="center" valign="center"/>
			<quad posn="-3 0" sizen="158 109" style="Bgs1" substyle="BgCardList" halign="center" valign="center" opacity="0.75"/>
			
		</frame>
		<frame id="SettingWheel">
			<quad pos="149 -66" z-index="0" size="11 11" bgcolor="FFFA" style="Icons128x32_1" substyle="Settings" scriptevents="1" id="settings"/>
		</frame>
	</frame>
	<script><!--
	
	#Include "MathLib" as ML
	#Include "TextLib" as TL
    #Include "AnimLib" as AL
    
	declare Integer	LastEventListChange;
	declare Boolean Setting_Debug;
	declare Boolean State;
	
	
	Void ShowDialog(Text Message) {
		declare Integer DialogVisibleTime = Now;
	
		declare Boolean Close = False;
	
		declare CMlFrame Dialog <=> (Page.GetFirstChild("dialog") as CMlFrame);
		declare CMlQuad Background <=> (Page.GetFirstChild("dialog_bg") as CMlQuad);
        (Page.GetFirstChild("dialog_content") as CMlLabel).Value = Message;
        declare CMlLabel Btn <=> (Page.GetFirstChild("dialog_btn") as CMlLabel);		

		while (!Close) {			
			yield;
			Background.Opacity = AL::EaseInOutSine(Now - DialogVisibleTime, 0., 0.75, 200);
			Dialog.Show();
			Dialog.RelativeScale = AL::EaseInOutSine(Now - DialogVisibleTime, 1.2, -0.2, 200);
	
			foreach (Event in PendingEvents) {
				if (Event.Type == CMlScriptEvent::Type::MouseClick && Event.Control == Btn)
					Close = True;
			}
        }
        
		Dialog.Hide();
		Background.Opacity = 0.;
	
		sleep(200);
	
	}
	
	Boolean ShowBooleanDialog(Text Message) {
        declare Integer DialogVisibleTime = Now;
        
		declare CMlFrame Dialog <=> (Page.GetFirstChild("booleandialog") as CMlFrame);
		declare CMlQuad Background <=> (Page.GetFirstChild("booleandialog_bg") as CMlQuad);
		declare CMlLabel Content <=> (Page.GetFirstChild("booleandialog_content") as CMlLabel);
		declare CMlLabel BtnYes <=> (Page.GetFirstChild("booleandialog_btnyes") as CMlLabel);
		declare CMlLabel BtnNo <=> (Page.GetFirstChild("booleandialog_btnno") as CMlLabel);
	
		Content.SetText(Message);
	
		while (True) {
			yield;
			Background.Opacity = AL::EaseInOutSine(Now - DialogVisibleTime, 0., 0.75, 200);
			Dialog.Show();
			Dialog.RelativeScale = AL::EaseInOutSine(Now - DialogVisibleTime, 1.2, -0.2, 200);
	
			foreach (Event in PendingEvents) {
				if (Event.Type == CMlScriptEvent::Type::MouseClick && Event.Control.HasClass("dialog")) {
					switch (Event.Control) {
						case BtnYes: {
                            Background.Opacity = 0.;
                            Dialog.Hide();
                            return True;
						}
						case BtnNo: {
							Background.Opacity = 0.;
                            Dialog.Hide();
                            return False;
						}
					}
				}
			}
		}
		return False;
	}
	
	Void home() {
		declare Integer DialogVisibleTime = Now;
		declare Boolean Close = False;
	
		declare CMlFrame Dialog <=> (Page.GetFirstChild("Home") as CMlFrame);
		declare CMlQuad Background <=> (Page.GetFirstChild("home_bg") as CMlQuad);
		declare CMlLabel Welcome <=> (Page.GetFirstChild("welcome_content") as CMlLabel);
		declare CMlLabel News <=> (Page.GetFirstChild("news_content") as CMlLabel);
		declare CMlLabel Btn <=> (Page.GetFirstChild("home_btnexit") as CMlLabel);
		declare CMlEntry serverPassword <=> (Page.GetFirstChild("serverPassword") as CMlEntry);
		declare CMlEntry serverHost <=> (Page.GetFirstChild("serverHost") as CMlEntry);		
        Welcome.SetText("Welcome to Grand 2, "^LocalUser.Name);
        
		while (!Close) {
			yield;
			Dialog.Show();
			Background.Show();
			AnimMgr.Add(Dialog,"<frame scale=\"1\" />", 200, CAnimManager::EAnimManagerEasing::SineInOut);
			AnimMgr.Add(Background,"<quad opacity=\"1\" />",200, CAnimManager::EAnimManagerEasing::SineInOut);
			foreach (Event in PendingEvents) {
				if (Event.Type == CMlScriptEvent::Type::MouseClick && Event.ControlId == "home_btnexit") {
					Close = True;
					State = True;
				}
	
				if (Event.Type == CMlScriptEvent::Type::MouseClick && Event.ControlId == "home_btnlogin") {
					SendCustomEvent("connectHost", [serverHost.Value, serverPassword.Value]);
					Close = True;
				}
			}
		}
		
		Dialog.Hide();
		Background.Opacity = 0.;
		Background.Hide();
	}
	
	Integer UpdateEventList(Integer _CurrentLine) {
		declare Text Page_EventList for Page;
		declare CMlLabel EventList <=> (Page.GetFirstChild("eventlist") as CMlLabel);
		declare CMlQuad EventListBg <=> (Page.GetFirstChild("eventlistbg") as CMlQuad);
		declare Integer OldLineCount = EventList.ValueLineCount;
		
		if (Page_EventList != EventList.Value) {
			EventList.SetText(Page_EventList);
			yield;
			declare Integer NewLinesCount = EventList.ValueLineCount - OldLineCount;
			
			if (NewLinesCount > 0 && EventList.ValueLineCount > 17) {
				EventList.RelativePosition[1] = (EventList.ValueLineCount - 17) * 2.;
			}
			
			LastEventListChange = Now;
			EventListBg.Opacity = 0.5;
			return EventList.ValueLineCount - 18;
		}
		
		if (Now - LastEventListChange > 200)
			EventListBg.Opacity = 0.25;
		return _CurrentLine;
	}
	
	Void EnableEvent() {
		declare CMlFrame Events <=> (Page.GetFirstChild("events") as CMlFrame);
		if (Setting_Debug == True){
			Events.Show();
		}
		else if (Setting_Debug == False){
			Events.Hide();
		}
    }
    
	Void setting(Text ui) {
		declare Integer DialogVisibleTime = Now;
		declare Boolean Close = False;
	
		declare CMlFrame Dialog <=> (Page.GetFirstChild("Settings") as CMlFrame);
		declare CMlLabel BtnDebug <=> (Page.GetFirstChild("settings_debug") as CMlLabel);
	
		BtnDebug.SetText(ui);
	
		while (!Close) {
			yield;
			Dialog.Show();
			AnimMgr.Add(Dialog,"<frame scale=\"1\" />", 200, CAnimManager::EAnimManagerEasing::SineInOut);
			foreach (Event in PendingEvents) {
				if (Event.Type == CMlScriptEvent::Type::MouseClick && Event.ControlId == "settings_close") {
					Close = True;
				}
	
				if (Event.Type == CMlScriptEvent::Type::MouseClick && Event.ControlId == "settings_debug") {
					if (Setting_Debug == True){
						Setting_Debug = False;
						BtnDebug.SetText("Disable");
					}
					else {
						Setting_Debug = True;
						BtnDebug.SetText("Enable");
					}
					EnableEvent();	
				}
			}
		}
		Dialog.Hide();
    }
    
	main() {
		declare Boolean Page_LaunchPlugin for Page = False;
		declare Boolean Page_StopScript for Page = False;
		
		
		declare CMlFrame	FrameEventListContainer	<=>	(Page.GetFirstChild("eventlistcontainer")	as CMlFrame);
		declare CMlLabel	LabelEventList			<=>	(Page.GetFirstChild("eventlist")			as CMlLabel);
		declare CMlQuad		QuadEventsUp			<=>	(Page.GetFirstChild("eventup")				as CMlQuad);
		declare CMlQuad		QuadEventsDown			<=>	(Page.GetFirstChild("eventdown")			as CMlQuad);
		declare CMlQuad		QuadSetting				<=>	(Page.GetFirstChild("settings")				as CMlQuad);
	
		declare Integer CurrentLine = 0;	
	
		FrameEventListContainer.ClipWindowActive = True;
		FrameEventListContainer.ClipWindowRelativePosition = <LabelEventList.RelativePosition[0] + LabelEventList.Size[0] / 2 - 1, LabelEventList.RelativePosition[1] - LabelEventList.Size[1] / 2 >;
		FrameEventListContainer.ClipWindowSize = LabelEventList.Size;
	
		Setting_Debug = False;
		
	
		//login 
		Page_LaunchPlugin = ShowBooleanDialog("Launching this plugin will reset all you current work. Continue?");
		if (State == False){
			home();
			Page_StopScript = State;
		}
		else {
			Page_StopScript = True;	
		}
		//group (to do)
	
		
		while (True) {
			//setting 
			// you should open the home dialog here, when user click the settings button...
			yield;
	
			if (Page_StopScript) break;
	
			foreach (Event in PendingEvents) {
				if (Event.Type == CMlEvent::Type::MouseClick) {
					switch (Event.Control) {
	
	//-------------------Debug Label----------------------------------\\
						case QuadEventsUp: { // Moves down the label
							if (CurrentLine > 0) {
								LabelEventList.RelativePosition[1] -= 2 * 2;
								CurrentLine -= 2;
							}
						}
						case QuadEventsDown: { // Moves up the label
							if (CurrentLine < LabelEventList.ValueLineCount - 1 - 17) {
								LabelEventList.RelativePosition[1] += 2 * 2;
								CurrentLine += 2;
							}
						}
	//-------------------Debug Label----------------------------------\\
	
						case QuadSetting: { // show setting
							if (Setting_Debug == True){
								setting("Enable");
							}
							else {
								setting("Disable");
							}
							
						}
					}
				}
			}
		CurrentLine = UpdateEventList(CurrentLine);
		}
	}
	--></script>	
	""";
}